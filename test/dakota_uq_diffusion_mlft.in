#@ s*: Label=FastTest
#@ p0: MPIProcs=2
#@ p1: MPIProcs=3
#@ s*: TimeoutAbsolute=3600
#@ s*: TimeoutDelay=1200

#environment,
#	graphics

method,
	model_pointer = 'HIERARCH'
### MULTIFIDELITY ###
	multifidelity_function_train		#s0,#s1,#s2,#s3,#s4,#s5,#s6,#s7
## No refinement:
	  collocation_points_sequence = 1000 400 300 200 100	#s0,#s2
#	  collocation_ratio = 1.75     	     	     		#s1,#s3
	  start_rank_sequence = 3 2 2 1 1			#s0,#s1
## C3 adapt_rank refinement (only):
#	  start_rank_sequence = 2 2 2 2 2 adapt_rank		#s2,#s3
## Dakota refinement: (individual, integrated)
# > FT can adapt along dimensions of both rank and order.  For now, we refine
#   order and rely on C3 adapt_rank (optionally):
# > spec supports start_{rank,order}_seq and colloc_pts_seq/plot_samples, which
#   specify _initial_ resolutions per level, prior to refinement/adaptation
# > Uniform refinement could support poly order (default) vs. rank (option)
#	  collocation_ratio = 1.75     	     	     		#s4,#s5,#s6,#s7
#	  p_refinement uniform					#s4,#s5,#s6,#s7
#	  allocation_control greedy				#s6,#s7
#	  start_rank_sequence = 3 2 2 1 1			#s4,#s6
#	  start_rank_sequence = 2 2 2 2 2 adapt_rank		#s5,#s7
#	  max_refinement_iterations = 5				#s4,#s5
#	  max_refinement_iterations = 10			#s6,#s7
#
### MULTILEVEL ###
#	multilevel_function_train				#s8,#s9,#s10
#	  pilot_samples = 100 40 30 20 10			#s8,#s9
#	  collocation_ratio = 1.75				#s10
#	  allocation_control rank_sampling			#s8,#s10
#	  allocation_control estimator_variance			#s9
#	  start_rank_sequence = 3 2 2 1 1			#s9
#	  start_rank_sequence = 2 2 2 2 2 adapt_rank		#s8,#s10
#
	  kick_rank = 2                      max_rank  = 10
	  start_order_sequence = 2 2 2 2 2   max_order = 10
          solver_tolerance = 1e-8  rounding_tolerance = 1e-8
	  convergence_tol  = 1e-2
	  seed = 1237
	  output silent

model,
	id_model = 'HIERARCH'
	surrogate hierarchical
	  ordered_model_fidelities = 'SIM1'
	  correction additive zeroth_order

model,
	id_model = 'SIM1'
	simulation
	  solution_level_control = 'mesh_size'
# dense matrices --> direct solvers --> cubic growth in expense
	  solution_level_cost = 1. 8. 64. 512. 4096.

variables,
	uniform_uncertain = 9	 # number of cosine terms in soln expansion
	  lower_bounds      =  9*-1.
	  upper_bounds      =  9* 1.
	discrete_state_set
	  integer = 1 # even poly degree for odd mesh pts including boundary
      	  set_values = 4 8 16 32 64
      	  descriptors = 'mesh_size'
    	real = 4
      	  elements_per_variable = 2 2 1 1
      	  set_values = 0.1 1 # field mean
                       0.5 4 # field std dev
                       1     # kernel order
                       0.2   # kernel length
      	  descriptors = 'field_mean' 'field_std_dev' 'kernel_order' 'kernel_length'
      	  initial_state = 1 4 1 0.2
	string = 2  # form of kernel (refer to Yang,Lei,Baker,Lin)
      	  elements_per_variable = 2 2
	  initial_state = 'cosine' 'off'
      	  set_values = 'cosine' 'exponential'
                       'off' 'on'
      	  descriptors = 'kernel_type' 'positivity'

interface,
	direct
	  analysis_driver = 'steady_state_diffusion_1d'

responses,
	response_functions = 3	 # number of soln pts excl. +/-5% (symmetric)
	no_gradients
	no_hessians
